name: packaging armv8 openwrt

on:
  workflow_dispatch:
    inputs:
      script_repo:
        description: "选择打包脚本储存库"
        required: false
        default: "flippy"
        type: choice
        options: [flippy, ophub]

      openwrt_board:
        description: "设置设备(CPU)型号"
        required: false
        default: "s905d_s905x3"

      customize_rk3399:
        description: "设置 rk3399 设备(设备型号:dtb名称)"
        required: false
        default: ""

      openwrt_kernel:
        description: "选择内核版本"
        required: false
        default: "6.1.y_6.6.y"
        type: choice
        options: [5.4.y, 5.10.y, 5.15.y, 6.1.y, 6.6.y, 6.1.y_6.6.y, 5.15.y_5.10.y]

      kernel_repo:
        description: "选择内核存储库"
        required: false
        default: "ophub/kernel"
        type: choice
        options: [ophub/kernel, breakings/OpenWrt]

      kernel_usage:
        description: "选择内核存储库的标签后缀"
        required: false
        default: "flippy"
        type: choice
        options: [flippy, stable]

      builder_name:
        description: "设置固件构建者签名"
        required: false
        default: "flippy"

      auto_kernel:
        description: "自动使用最新内核"
        required: false
        default: true
        type: boolean

      upload_artifact:
        description: "上传固件到 Artifact"
        required: false
        default: false
        type: boolean

      upload_release:
        description: "上传固件到 Releases"
        required: false
        default: true
        type: boolean

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  TZ: Asia/Shanghai

jobs:
  package:
    runs-on: ubuntu-22.04
    if: github.event.repository.owner.id == github.event.sender.id || ! github.event.sender.id
    name: packaging ${{ matrix.target }} ${{ matrix.branch }}
    strategy:
      fail-fast: false
      matrix:
        target: [armv8]
        branch: [18.06, 23.05]

    env:
      CONFIG_FILE: configs/${{ matrix.target }}.config
      RELEASE_TAG: ${{ matrix.target }}-${{ matrix.branch }}

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization Environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi $(docker images -q)
        sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android $AGENT_TOOLSDIRECTORY
        sudo -E apt-get -y update
        sudo -E apt-get -y install $(curl -fsSL is.gd/depends_ubuntu_2204)
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get -y clean
        sudo timedatectl set-timezone "$TZ"

    - name: Clone Source Code
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        cd openwrt
        echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV
        COMMIT_AUTHOR=$(git show -s --date=short --format="作者: %an")
        echo "COMMIT_AUTHOR=$COMMIT_AUTHOR" >> $GITHUB_ENV
        COMMIT_DATE=$(git show -s --date=short --format="时间: %ci")
        echo "COMMIT_DATE=$COMMIT_DATE" >> $GITHUB_ENV
        COMMIT_MESSAGE=$(git show -s --date=short --format="内容: %s")
        echo "COMMIT_MESSAGE=$COMMIT_MESSAGE" >> $GITHUB_ENV
        COMMIT_HASH=$(git show -s --date=short --format="hash: %H")
        echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_ENV

    - name: Generate Variables
      run: |
        cp $CONFIG_FILE $OPENWRT_PATH/.config
        cd $OPENWRT_PATH
        make defconfig > /dev/null 2>&1
        SOURCE_REPO=$(echo $REPO_URL | awk -F '/' '{print $(NF)}')
        echo "SOURCE_REPO=$SOURCE_REPO" >> $GITHUB_ENV
        DEVICE_TARGET=$(cat .config | grep CONFIG_TARGET_BOARD | awk -F '"' '{print $2}')
        echo "DEVICE_TARGET=$DEVICE_TARGET" >> $GITHUB_ENV
        DEVICE_SUBTARGET=$(cat .config | grep CONFIG_TARGET_SUBTARGET | awk -F '"' '{print $2}')
        echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> $GITHUB_ENV
        KERNEL=$(grep -oP 'KERNEL_PATCHVER:=\K[^ ]+' target/linux/$DEVICE_TARGET/Makefile)
        KERNEL_VERSION=$(sed -n 2p include/kernel-$KERNEL | awk -F '-' '{print $2}' | awk -F ' ' '{print $1}')
        echo "KERNEL_VERSION=$KERNEL_VERSION" >> $GITHUB_ENV

    - name: Download OpenWrt Firmware
      id: download
      run: |
        FIRMWARE_PATH=openwrt/bin/targets/armvirt/64
        [ -d $FIRMWARE_PATH ] || mkdir -p $FIRMWARE_PATH
        cd $FIRMWARE_PATH
        wget -q $(curl -s "https://api.github.com/repos/$GITHUB_REPOSITORY/releases" | grep "$RELEASE_TAG.*rootfs.tar.gz" | awk -F '"' '{print $4}')
        wget -q https://github.com/$GITHUB_REPOSITORY/releases/download/$RELEASE_TAG/build.config
        wget -q https://github.com/$GITHUB_REPOSITORY/releases/download/$RELEASE_TAG/config.buildinfo
        wget -q https://github.com/$GITHUB_REPOSITORY/releases/download/$RELEASE_TAG/packages.tar.gz
        echo "FIRMWARE_PATH=$PWD" >> $GITHUB_ENV
        echo "DATE=$(date +"%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
        if [ ${{ matrix.branch }} == '23.05' ]; then
          echo "REPO_BRANCH=openwrt-23.05" >> $GITHUB_ENV
        fi

    - name: Use Flippy Script Packaging
      if: steps.download.conclusion == 'success' && github.event.inputs.script_repo == 'flippy'
      uses: haiibo/flippy-openwrt-actions@main
      env:
        OPENWRT_ARMVIRT: openwrt/bin/targets/*/*/*rootfs.tar.gz
        KERNEL_REPO_URL: ${{ github.event.inputs.kernel_repo }}
        KERNEL_USAGE: ${{ github.event.inputs.kernel_usage }}
        PACKAGE_SOC: ${{ github.event.inputs.openwrt_board }}
        KERNEL_VERSION_NAME: ${{ github.event.inputs.openwrt_kernel }}
        KERNEL_AUTO_LATEST: ${{ github.event.inputs.auto_kernel }}
        WHOAMI: ${{ github.event.inputs.builder_name }}
        CUSTOMIZE_RK3399: ${{ github.event.inputs.customize_rk3399 }}

    - name: Use Ophub Script Packaging
      if: steps.download.conclusion == 'success' && github.event.inputs.script_repo == 'ophub'
      uses: ophub/amlogic-s9xxx-openwrt@main
      with:
        openwrt_path: openwrt/bin/targets/*/*/*rootfs.tar.gz
        openwrt_board: ${{ github.event.inputs.openwrt_board }}
        openwrt_kernel: ${{ github.event.inputs.openwrt_kernel }}
        auto_kernel: ${{ github.event.inputs.auto_kernel }}
        kernel_repo: ${{ github.event.inputs.kernel_repo }}
        kernel_usage: ${{ github.event.inputs.kernel_usage }}
        builder_name: ${{ github.event.inputs.builder_name }}

    - name: Organize Files
      if: env.PACKAGED_STATUS == 'success'
      run: |
        cd $PACKAGED_OUTPUTPATH
        rm -f *rootfs.tar.gz *.sha

    - name: Upload OpenWrt To Artifact
      if: env.PACKAGED_STATUS == 'success' && github.event.inputs.upload_artifact == 'true'
      uses: haiibo/upload-artifact-as-is@master
      with:
        path: ${{ env.PACKAGED_OUTPUTPATH }}

    - name: Upload OpenWrt To Release
      if: env.PACKAGED_STATUS == 'success' && github.event.inputs.upload_release == 'true'
      uses: ncipollo/release-action@main
      with:
        name: ${{ env.DATE }} for ${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}
        allowUpdates: true
        removeArtifacts: true
        tag: ${{ env.RELEASE_TAG }}
        token: ${{ secrets.GITHUB_TOKEN }}
        artifacts: ${{ env.FIRMWARE_PATH }}/*,${{ env.PACKAGED_OUTPUTPATH }}/*
        body: |
          **This is OpenWrt Firmware for ${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}**
          ### 📒 固件信息
          - 💻 平台架构: ${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}
          - ⚽ 固件源码: ${{ env.REPO_URL }}
          - 💝 源码分支: ${{ env.REPO_BRANCH }}
          - 🚀 内核版本: ${{ env.KERNEL_VERSION }}
          - 🌐 默认地址: 192.168.1.2
          - 🔑 默认密码: password
          ### 🧊 固件版本
          - 固件编译前最后一次➦[主源码](${{ env.REPO_URL }})更新记录
          - ${{ env.COMMIT_AUTHOR }}
          - ${{ env.COMMIT_DATE }}
          - ${{ env.COMMIT_MESSAGE }}
          - ${{ env.COMMIT_HASH }}
